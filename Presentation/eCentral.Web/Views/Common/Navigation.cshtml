@using Telerik.Web.Mvc.UI;
@using eCentral.Web.Framework.Web;
@using eCentral.Services.Security;
@using eCentral.Core.Domain.Security;
@{
    var siteInformationSettings = EngineContext.Current.Resolve<SiteInformationSettings>();

    if (!Telerik.Web.Mvc.SiteMapManager.SiteMaps.ContainsKey("sitemap"))
    {
        Telerik.Web.Mvc.SiteMapManager.SiteMaps.Register<Telerik.Web.Mvc.XmlSiteMap>("sitemap", sitemap =>
            sitemap.Load());
    }

    var permissionService = EngineContext.Current.Resolve<IPermissionService>();
}
<div class="shortcuts">
    <ul>
        <li><a href="#" title="@T("Navigation.JobAdd")" class="tip"><span class="icon24 icomoon-icon-pencil">
        </span></a></li>
        <li><a href="@Url.RouteUrl(SystemRouteNames.ClientAdd)" title="@T("Navigation.Clients.Add")" class="tip">
            <span class="icon24 entypo-icon-users"></span></a></li>
        <li><a href="#" title="@T("Navigation.ViewReports")" class="tip"><span class="icon24 iconic-icon-chart">
        </span></a></li>
        @if (WorkContext.IsAdministrator)
        {
            <li><a href="#" title="@T("Navigation.DatabaseBackup")" class="tip"><span class="icon24 icomoon-icon-database">
            </span></a></li>
        }
    </ul>
</div>
<div class="sidenav">
    <div class="sidebar-widget" style="margin: -1px 0 0 0;">
        <h5 class="title" style="margin-bottom: 0">
            Navigation</h5>
    </div>
    <!-- End .sidenav-widget -->
    <div class="mainnav">
        @BuildMenu(Telerik.Web.Mvc.SiteMapManager.SiteMaps["sitemap"].RootNode.ChildNodes, permissionService, false)
    </div>
</div>
<!-- End sidenav -->
@helper BuildMenu(IList<Telerik.Web.Mvc.SiteMapNode> siteNodes, IPermissionService permissionService, bool isChild = true)
    {
    <ul @if (isChild)
        { <text>class="sub"</text> }>
        @foreach (Telerik.Web.Mvc.SiteMapNode siteNode in siteNodes)
        {
            @BuildMenuItem(siteNode, permissionService)
        }
    </ul>
}
@helper BuildMenuItem(Telerik.Web.Mvc.SiteMapNode siteNode, IPermissionService permissionService)
    {
    var icon = siteNode.Attributes["Icon"];
    if (icon != null && !string.IsNullOrEmpty(icon.ToString()))
    {
        icon = icon.ToString();
    }
    else
    {
        icon = "icomoon-icon-arrow-right-3";
    }

    var resource = siteNode.Attributes["siteResource"];
    if (resource != null && !string.IsNullOrEmpty(resource.ToString()))
    {
        resource = T(resource.ToString()).ToHtmlString();
    }

    var isValid = true;

    // check whether to show in the navigation or not
    if (siteNode.Attributes["IsNavigation"] != null)
    {
        isValid = Convert.ToBoolean(siteNode.Attributes["IsNavigation"]);
    }

    var routeUrl = "#";

    if (isValid)
    {
        // reset isvalid
        isValid = false;
        var permissionNames = siteNode.Attributes["PermissionNames"];
        if (permissionNames != null && !string.IsNullOrEmpty(permissionNames.ToString()))
        {
            isValid = permissionNames.ToString().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                .Any(permissionName => permissionService.Authorize(permissionName.Trim()));
        }

        if (!string.IsNullOrEmpty(siteNode.RouteName))
        {
            routeUrl = Url.RouteUrl(siteNode.RouteName);
        }
        else if (!string.IsNullOrEmpty(siteNode.ControllerName) && !string.IsNullOrEmpty(siteNode.ActionName)) {
            routeUrl = Url.Action(siteNode.ActionName, siteNode.ControllerName);    
        }
    }

    if (isValid)
    {
    <li><a href="@routeUrl.ToLowerInvariant()"><span class="icon16 @icon"></span>@resource</a>
        @if (siteNode.ChildNodes.Count > 0)
        {
            // before we call the buildmenuitem for the child, 
            // we need to check whether it has any child nodes
            // have any active link - assume that attribute IsNavigation is only avaiable as false
            // check now many nodes with active link and how many with inactive links
            var activeNodeCount = siteNode.ChildNodes.Where(sn => sn.Attributes["IsNavigation"] == null).Count();
            var inactiveNodeCount = siteNode.ChildNodes.Where(sn => sn.Attributes["IsNavigation"] != null).Count();
            if (activeNodeCount >= inactiveNodeCount)
            {
            @BuildMenu(siteNode.ChildNodes, permissionService)
            }
        }
    </li>
    }
}